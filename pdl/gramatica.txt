Terminales = { && == = + id ent cad output input return |= ; int boolean string void if do
while function var , { } ( ) }
NoTerminales = { P E E2 R R2 U U2 V V2 S S2 X L Q T A B C F H K }
Axioma = P
Producciones = {
P -> B P
P -> F P
P -> lambda
E -> R E2
E2 -> && R E2
E2 -> lambda
R -> U R2
R2 -> == U R2
R2 -> lambda
U -> V U2
U2 -> + V U2
U2 -> lambda
V -> id V2
V -> ( E )
V -> ent
V -> cad
V -> , id V2
V2 -> ( L )
V2 -> lambda
S -> id S2
S -> output E ;
S -> input id ;
S -> return X ;
S2 -> = E ;
S2 -> |= E ;
S2 -> ( L ) ;
S2 -> lambda
X -> E
X -> lambda
L -> E Q
L -> lambda
Q -> , E Q
Q -> lambda
T -> int
T -> boolean
T -> string
A -> T id K
A -> void
B -> if ( E ) S
B -> S
B -> var T id ;
B -> do { C } while ( E ) ;
C -> B C
C -> lambda
F -> function H id ( A ) { C }
H -> T
H -> void
K -> , T id K
K -> lambda
}
